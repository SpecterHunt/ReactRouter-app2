{"ast":null,"code":"var _jsxFileName = \"/Users/ayushtripathi/Desktop/resume/React/ReactRouter-app2/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  // if (data.isError) {\n  //   return <p>{data.message}</p>;\n  // }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport const loader = async () => {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events\" };\n\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events\" }), {\n    //   status: 500,\n    // });\n\n    throw json({\n      message: \"Could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["json","useLoaderData","EventsList","EventsPage","data","events","loader","response","fetch","ok","message","status"],"sources":["/Users/ayushtripathi/Desktop/resume/React/ReactRouter-app2/frontend/src/pages/Events.js"],"sourcesContent":["import { json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const data = useLoaderData();\n  // if (data.isError) {\n  //   return <p>{data.message}</p>;\n  // }\n  const events = data.events;\n  return (\n    <>\n      <EventsList events={events} />\n    </>\n  );\n}\n\nexport default EventsPage;\n\nexport const loader = async () => {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events\" };\n\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events\" }), {\n    //   status: 500,\n    // });\n\n    throw json(\n      { message: \"Could not fetch events\" },\n      {\n        status: 500,\n      }\n    );\n  } else {\n    return response;\n  }\n};\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAAA;AAElD,SAASC,UAAU,GAAG;EAAA;EACpB,MAAMC,IAAI,GAAGH,aAAa,EAAE;EAC5B;EACA;EACA;EACA,MAAMI,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1B,oBACE;IAAA,uBACE,QAAC,UAAU;MAAC,MAAM,EAAEA;IAAO;MAAA;MAAA;MAAA;IAAA;EAAG,iBAC7B;AAEP;AAAC,GAXQF,UAAU;EAAA,QACJF,aAAa;AAAA;AAAA,KADnBE,UAAU;AAanB,eAAeA,UAAU;AAEzB,OAAO,MAAMG,MAAM,GAAG,YAAY;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;;IAEA;IACA;IACA;;IAEA,MAAMT,IAAI,CACR;MAAEU,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}