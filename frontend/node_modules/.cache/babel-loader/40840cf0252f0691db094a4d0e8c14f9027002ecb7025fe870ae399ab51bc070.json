{"ast":null,"code":"var _jsxFileName = \"/Users/ayushtripathi/Desktop/resume/React/ReactRouter-app2/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadedEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 26\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events\" };\n\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events\" }), {\n    //   status: 500,\n    // });\n\n    throw json({\n      message: \"Could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport const loader = () => {\n  return defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","EventsPage","events","loadedEvents","loadEvents","response","fetch","ok","message","status","loader"],"sources":["/Users/ayushtripathi/Desktop/resume/React/ReactRouter-app2/frontend/src/pages/Events.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return (\n    <Await resolve={events}>\n      {(loadedEvents) => <EventsList events={loadedEvents} />}\n    </Await>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events\" };\n\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events\" }), {\n    //   status: 500,\n    // });\n\n    throw json(\n      { message: \"Could not fetch events\" },\n      {\n        status: 500,\n      }\n    );\n  } else {\n    return response;\n  }\n}\n\nexport const loader = () => {\n  return defer({\n    events: loadEvents(),\n  });\n};\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAElD,SAASC,UAAU,GAAG;EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGH,aAAa,EAAE;EAElC,oBACE,QAAC,KAAK;IAAC,OAAO,EAAEG,MAAO;IAAA,UACnBC,YAAY,iBAAK,QAAC,UAAU;MAAC,MAAM,EAAEA;IAAa;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACjD;AAEZ;AAAC,GARQF,UAAU;EAAA,QACEF,aAAa;AAAA;AAAA,KADzBE,UAAU;AAUnB,eAAeA,UAAU;AAEzB,eAAeG,UAAU,GAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;;IAEA;IACA;IACA;;IAEA,MAAMT,IAAI,CACR;MAAEU,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,MAAMK,MAAM,GAAG,MAAM;EAC1B,OAAOb,KAAK,CAAC;IACXK,MAAM,EAAEE,UAAU;EACpB,CAAC,CAAC;AACJ,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}