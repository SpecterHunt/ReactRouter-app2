{"ast":null,"code":"var _jsxFileName = \"/Users/ayushtripathi/Desktop/resume/React/ReactRouter-app2/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport EditEventPage from \"./pages/EditEvent\";\nimport EventDetailPage from \"./pages/EventDetail\";\nimport EventsPage from \"./pages/Events\";\nimport EventsRootLayout from \"./pages/EventsRoot\";\nimport HomePage from \"./pages/Home\";\nimport NewEventPage from \"./pages/NewEvent\";\nimport RootLayout from \"./pages/Root\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 33\n      }, this)\n    }, {\n      path: \"events\",\n      element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this),\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 24\n        }, this),\n        loader: async () => {\n          const response = await fetch(\"http://localhost:8080/events\");\n          if (!response.ok) {} else {\n            const resData = await response.json();\n            return resData.events;\n          }\n        }\n      }, {\n        path: \":eventId\",\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 42\n        }, this)\n      }, {\n        path: \"new\",\n        element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 37\n        }, this)\n      }, {\n        path: \":eventId/edit\",\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 47\n        }, this)\n      }]\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","EditEventPage","EventDetailPage","EventsPage","EventsRootLayout","HomePage","NewEventPage","RootLayout","App","router","path","element","children","index","loader","response","fetch","ok","resData","json","events"],"sources":["/Users/ayushtripathi/Desktop/resume/React/ReactRouter-app2/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport EditEventPage from \"./pages/EditEvent\";\nimport EventDetailPage from \"./pages/EventDetail\";\nimport EventsPage from \"./pages/Events\";\nimport EventsRootLayout from \"./pages/EventsRoot\";\nimport HomePage from \"./pages/Home\";\nimport NewEventPage from \"./pages/NewEvent\";\nimport RootLayout from \"./pages/Root\";\n\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: \"/\",\n      element: <RootLayout />,\n      children: [\n        { index: true, element: <HomePage /> },\n        {\n          path: \"events\",\n          element: <EventsRootLayout />,\n          children: [\n            {\n              index: true,\n              element: <EventsPage />,\n              loader: async () => {\n                const response = await fetch(\"http://localhost:8080/events\");\n\n                if (!response.ok) {\n                } else {\n                  const resData = await response.json();\n                  return resData.events;\n                }\n              },\n            },\n            { path: \":eventId\", element: <EventDetailPage /> },\n            { path: \"new\", element: <NewEventPage /> },\n            { path: \":eventId/edit\", element: <EditEventPage /> },\n          ],\n        },\n      ],\n    },\n  ]);\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,eAAe,MAAM,qBAAqB;AACjD,OAAOC,UAAU,MAAM,gBAAgB;AACvC,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AAAC;AAEtC,SAASC,GAAG,GAAG;EACb,MAAMC,MAAM,GAAGV,mBAAmB,CAAC,CACjC;IACEW,IAAI,EAAE,GAAG;IACTC,OAAO,eAAE,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG;IACvBC,QAAQ,EAAE,CACR;MAAEC,KAAK,EAAE,IAAI;MAAEF,OAAO,eAAE,QAAC,QAAQ;QAAA;QAAA;QAAA;MAAA;IAAI,CAAC,EACtC;MACED,IAAI,EAAE,QAAQ;MACdC,OAAO,eAAE,QAAC,gBAAgB;QAAA;QAAA;QAAA;MAAA,QAAG;MAC7BC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,IAAI;QACXF,OAAO,eAAE,QAAC,UAAU;UAAA;UAAA;UAAA;QAAA,QAAG;QACvBG,MAAM,EAAE,YAAY;UAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;UAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,CAClB,CAAC,MAAM;YACL,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;YACrC,OAAOD,OAAO,CAACE,MAAM;UACvB;QACF;MACF,CAAC,EACD;QAAEV,IAAI,EAAE,UAAU;QAAEC,OAAO,eAAE,QAAC,eAAe;UAAA;UAAA;UAAA;QAAA;MAAI,CAAC,EAClD;QAAED,IAAI,EAAE,KAAK;QAAEC,OAAO,eAAE,QAAC,YAAY;UAAA;UAAA;UAAA;QAAA;MAAI,CAAC,EAC1C;QAAED,IAAI,EAAE,eAAe;QAAEC,OAAO,eAAE,QAAC,aAAa;UAAA;UAAA;UAAA;QAAA;MAAI,CAAC;IAEzD,CAAC;EAEL,CAAC,CACF,CAAC;EACF,oBAAO,QAAC,cAAc;IAAC,MAAM,EAAEF;EAAO;IAAA;IAAA;IAAA;EAAA,QAAG;AAC3C;AAAC,KAjCQD,GAAG;AAmCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}